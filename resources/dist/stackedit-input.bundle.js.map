{"version":3,"sources":["webpack:///./resources/js/Lib/vuetify-formjson/Fields/StackEdit/extensions/libs/markdownItTasklist.js","webpack:///./resources/js/Lib/vuetify-formjson/Fields/StackEdit/StackEdit.vue?3b4d","webpack:///./resources/js/Lib/vuetify-formjson/Fields/StackEdit/extensions/libs/markdownItMath.js","webpack:///./resources/js/Lib/vuetify-formjson/Fields/StackEdit/services/extensionSvc.js","webpack:///./resources/js/Lib/vuetify-formjson/Fields/StackEdit/extensions/katexExtension.js","webpack:///./resources/js/Lib/vuetify-formjson/Fields/StackEdit/extensions/libs/markdownItAnchor.js","webpack:///./resources/js/Lib/vuetify-formjson/Fields/StackEdit/extensions/markdownExtension.js","webpack:///./resources/js/Lib/vuetify-formjson/Fields/StackEdit/services/markdownGrammarSvc.js","webpack:///./resources/js/Lib/vuetify-formjson/Fields/StackEdit/services/utils.js","webpack:///./resources/js/Lib/vuetify-formjson/Fields/StackEdit/services/markdownConversionSvc.js","webpack:///./resources/js/Lib/vuetify-formjson/Fields/StackEdit/StackEdit.vue?fb96","webpack:///resources/js/Lib/vuetify-formjson/Fields/StackEdit/StackEdit.vue","webpack:///./resources/js/Lib/vuetify-formjson/Fields/StackEdit/StackEdit.vue"],"names":["attrSet","token","name","value","index","attrIndex","attr","attrPush","attrs","module","exports","md","core","ruler","after","tokens","Token","i","length","content","charCodeAt","type","cross","toLowerCase","checkbox","children","unshift","slice","texMath","state","silent","startMathPos","pos","src","endMarker","afterStartMarker","endMarkerPos","indexOf","nextPos","beforeEndMarker","suffix","push","inline","getOptionsListeners","initConverterListeners","sectionPreviewListeners","listener","priority","properties","isCurrentFile","reduce","options","markdown","forEach","extensionSvc","math","extensions","katex","enabled","use","markdownItMath","renderer","rules","inline_math","idx","utils","escapeHtml","display_math","elt","highlighter","displayMode","katexElt","highlighted","render","textContent","e","message","querySelectorAll","cl_each","before","headingOpenToken","headingContent","anchorHash","slug","replace","charCode","anchor","Object","prototype","hasOwnProperty","call","headingAnchor","undefined","result","child","coreBaseRules","blockBaseRules","inlineBaseRules","inlineBaseRules2","assign","set","html","breaks","linkify","typographer","langPrefix","enable","blockRules","fence","splice","table","block","inlineRules","inlineRules2","del","ruler2","abbr","markdownitAbbr","deflist","markdownitDeflist","footnote","markdownitFootnote","imgsize","markdownitImgsize","mark","markdownitMark","sub","markdownitSub","sup","markdownitSup","tasklist","markdownitTasklist","markdownitAnchor","table_open","opts","renderToken","table_close","textAlignLength","td_open","th_open","footnote_ref","n","Number","meta","id","subId","isEditor","spanElt","checkboxElt","document","createElement","className","classList","contains","setAttribute","disabled","parentNode","replaceChild","urlPattern","RegExp","emailPattern","markup","comment","tag","pattern","inside","punctuation","namespace","entity","latex","keyword","lparen","rparen","grammars","main","list","blockquote","join","term","cl","insideFences","hr","task","strong","defs","fndef","abbrdef","linkdef","url","entries","def","pre","rest","inlinefn","fn","img","lookbehind","link","imgref","linkref","email","em","c","restLight","code","grammar","p","crypto","window","msCrypto","alphabet","split","radix","array","Uint32Array","parseQueryParams","params","param","map","decodeURIComponent","key","filterParams","urlParser","deepCopy","obj","JSON","parse","stringify","computedPresets","queryParams","location","hash","setQueryParams","this","serializedParams","encodeURIComponent","sanitizeText","text","constants","textMaxLength","sanitizeName","defaultName","sanitizeFilename","trim","serializeObject","toString","keys","sort","sorted","valueKey","search","items","criteria","some","item","every","uid","getRandomValues","cl_map","str","getItemHash","history","addItemHash","makeWorkspaceId","Math","abs","getDbName","workspaceId","dbName","encodeBase64","urlSafe","uriEncodedStr","utf8Str","match","p1","String","fromCharCode","btoa","decodeBase64","sanitizedStr","atob","computeProperties","yamlProperties","yaml","safeLoad","computedExtensions","deepOverride","opt","objType","preset","randomize","floor","random","setInterval","func","interval","awaitSequence","values","asyncFunc","results","valuesLeft","reverse","runWithNextValue","a","pop","awaitSome","someResult","addQueryParams","filter","href","resolveUrl","baseUrl","path","oldBaseElt","getElementsByTagName","oldHref","newBaseElt","head","appendChild","removeChild","getHostname","hostname","encodeUrlPath","parseGithubRepoUrl","parsedRepo","owner","repo","parseGitlabProjectPath","parsedProject","createHiddenIframe","iframeElt","style","position","left","width","height","wrapRange","range","eltProperties","rangeLength","wrappedLength","treeWalker","createTreeWalker","commonAncestorContainer","NodeFilter","SHOW_TEXT","startOffset","currentNode","startContainer","nodeType","Node","TEXT_NODE","nextNode","nodeValue","endContainer","endOffset","splitText","insertBefore","unwrapRange","eltCollection","Array","firstChild","previousSibling","nextSibling","diffMatchPatch","DiffMatchPatch","create","createFlagMap","arr","startSectionBlockTypeMap","listBlockTypeMap","blockquoteBlockTypeMap","tableBlockTypeMap","deflistBlockTypeMap","hashArray","valueHash","valueArray","strHash","apply","defaultOptions","defaultConverter","defaultPrismGrammars","init","defaultProperties","createConverter","markdownGrammarSvc","converter","MarkdownIt","rule","env","self","sectionDelimiter","parseSections","markdownState","State","markdownCoreRules","getRules","lines","parsingCtx","sections","data","addSection","maxLine","section","level","convert","previousConversionCtx","isConverted","htmlSectionList","shift","htmlSectionDiff","newSectionHash","oldSectionHash","diff_main","sectionList","highlight","component","_h","$createElement","_self","_c","ref","_v"],"mappings":"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","file":"stackedit-input.bundle.js","sourcesContent":["function attrSet(token, name, value) {\n  const index = token.attrIndex(name);\n  const attr = [name, value];\n\n  if (index < 0) {\n    token.attrPush(attr);\n  } else {\n    token.attrs[index] = attr;\n  }\n}\n\nmodule.exports = (md) => {\n  md.core.ruler.after('inline', 'tasklist', ({ tokens, Token }) => {\n    for (let i = 2; i < tokens.length; i += 1) {\n      const token = tokens[i];\n      if (token.content\n        && token.content.charCodeAt(0) === 0x5b /* [ */\n        && token.content.charCodeAt(2) === 0x5d /* ] */\n        && token.content.charCodeAt(3) === 0x20 /* space */\n        && token.type === 'inline'\n        && tokens[i - 1].type === 'paragraph_open'\n        && tokens[i - 2].type === 'list_item_open'\n      ) {\n        const cross = token.content[1].toLowerCase();\n        if (cross === ' ' || cross === 'x') {\n          const checkbox = new Token('html_inline', '', 0);\n          if (cross === ' ') {\n            checkbox.content = '<span class=\"task-list-item-checkbox\" type=\"checkbox\">&#9744;</span>';\n          } else {\n            checkbox.content = '<span class=\"task-list-item-checkbox checked\" type=\"checkbox\">&#9745;</span>';\n          }\n          token.children.unshift(checkbox);\n          token.children[1].content = token.children[1].content.slice(3);\n          token.content = token.content.slice(3);\n          attrSet(tokens[i - 2], 'class', 'task-list-item');\n        }\n      }\n    }\n  });\n};\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"markdownContent\"},[_vm._v(\"\\n  content\\n\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","function texMath(state, silent) {\n  let startMathPos = state.pos;\n  if (state.src.charCodeAt(startMathPos) !== 0x24 /* $ */) {\n    return false;\n  }\n\n  // Parse tex math according to http://pandoc.org/README.html#math\n  let endMarker = '$';\n  startMathPos += 1;\n  const afterStartMarker = state.src.charCodeAt(startMathPos);\n  if (afterStartMarker === 0x24 /* $ */) {\n    endMarker = '$$';\n    startMathPos += 1;\n    if (state.src.charCodeAt(startMathPos) === 0x24 /* $ */) {\n      // 3 markers are too much\n      return false;\n    }\n  } else if (\n    // Skip if opening $ is succeeded by a space character\n    afterStartMarker === 0x20 /* space */\n    || afterStartMarker === 0x09 /* \\t */\n    || afterStartMarker === 0x0a /* \\n */\n  ) {\n    return false;\n  }\n  const endMarkerPos = state.src.indexOf(endMarker, startMathPos);\n  if (endMarkerPos === -1) {\n    return false;\n  }\n  if (state.src.charCodeAt(endMarkerPos - 1) === 0x5C /* \\ */) {\n    return false;\n  }\n  const nextPos = endMarkerPos + endMarker.length;\n  if (endMarker.length === 1) {\n    // Skip if $ is preceded by a space character\n    const beforeEndMarker = state.src.charCodeAt(endMarkerPos - 1);\n    if (beforeEndMarker === 0x20 /* space */\n      || beforeEndMarker === 0x09 /* \\t */\n      || beforeEndMarker === 0x0a /* \\n */) {\n      return false;\n    }\n    // Skip if closing $ is succeeded by a digit (eg $5 $10 ...)\n    const suffix = state.src.charCodeAt(nextPos);\n    if (suffix >= 0x30 && suffix < 0x3A) {\n      return false;\n    }\n  }\n\n  if (!silent) {\n    const token = state.push(endMarker.length === 1 ? 'inline_math' : 'display_math', '', 0);\n    token.content = state.src.slice(startMathPos, endMarkerPos);\n  }\n  state.pos = nextPos;\n  return true;\n}\n\nexport default (md) => {\n  md.inline.ruler.push('texMath', texMath);\n};\n","const getOptionsListeners = [];\nconst initConverterListeners = [];\nconst sectionPreviewListeners = [];\n\nexport default {\n    onGetOptions(listener) {\n        getOptionsListeners.push(listener);\n    },\n\n    onInitConverter(priority, listener) {\n        initConverterListeners[priority] = listener;\n    },\n\n    onSectionPreview(listener) {\n        sectionPreviewListeners.push(listener);\n    },\n\n    getOptions(properties, isCurrentFile) {\n        return getOptionsListeners.reduce((options, listener) => {\n            listener(options, properties, isCurrentFile);\n            return options;\n        }, {});\n    },\n\n    initConverter(markdown, options) {\n    // Use forEach as it's a sparsed array\n        initConverterListeners.forEach((listener) => {\n            listener(markdown, options);\n        });\n    },\n\n    sectionPreview(elt, options, isEditor) {\n        sectionPreviewListeners.forEach((listener) => {\n            listener(elt, options, isEditor);\n        });\n    },\n};\n","import katex from 'katex';\nimport markdownItMath from './libs/markdownItMath';\nimport extensionSvc from '../services/extensionSvc';\n\nextensionSvc.onGetOptions((options, properties) => {\n    options.math = properties.extensions.katex.enabled;\n});\n\nextensionSvc.onInitConverter(2, (markdown, options) => {\n    if (options.math) {\n        markdown.use(markdownItMath);\n        markdown.renderer.rules.inline_math = (tokens, idx) =>\n            `<span class=\"katex--inline\">${markdown.utils.escapeHtml(tokens[idx].content)}</span>`;\n        markdown.renderer.rules.display_math = (tokens, idx) =>\n            `<span class=\"katex--display\">${markdown.utils.escapeHtml(tokens[idx].content)}</span>`;\n    }\n});\n\nextensionSvc.onSectionPreview((elt) => {\n    const highlighter = displayMode => (katexElt) => {\n        if (!katexElt.highlighted) {\n            try {\n                katex.render(katexElt.textContent, katexElt, { displayMode });\n            } catch (e) {\n                katexElt.textContent = `${e.message}`;\n            }\n        }\n        katexElt.highlighted = true;\n    };\n    elt.querySelectorAll('.katex--inline').cl_each(highlighter(false));\n    elt.querySelectorAll('.katex--display').cl_each(highlighter(true));\n});\n","export default (md) => {\n  md.core.ruler.before('replacements', 'anchors', (state) => {\n    const anchorHash = {};\n    let headingOpenToken;\n    let headingContent;\n    state.tokens.forEach((token) => {\n      if (token.type === 'heading_open') {\n        headingContent = '';\n        headingOpenToken = token;\n      } else if (token.type === 'heading_close') {\n        headingOpenToken.headingContent = headingContent;\n\n        // According to http://pandoc.org/README.html#extension-auto_identifiers\n        let slug = headingContent\n          .replace(/\\s/g, '-') // Replace all spaces and newlines with hyphens\n          .replace(/[\\0-,/:-@[-^`{-~]/g, '') // Remove all punctuation, except underscores, hyphens, and periods\n          .toLowerCase(); // Convert all alphabetic characters to lowercase\n\n        // Remove everything up to the first letter\n        let i;\n        for (i = 0; i < slug.length; i += 1) {\n          const charCode = slug.charCodeAt(i);\n          if ((charCode >= 0x61 && charCode <= 0x7A) || charCode > 0x7E) {\n            break;\n          }\n        }\n\n        // If nothing left after this, use `section`\n        slug = slug.slice(i) || 'section';\n\n        let anchor = slug;\n        let index = 1;\n        while (Object.prototype.hasOwnProperty.call(anchorHash, anchor)) {\n          anchor = `${slug}-${index}`;\n          index += 1;\n        }\n        anchorHash[anchor] = true;\n        headingOpenToken.headingAnchor = anchor;\n        headingOpenToken.attrs = [\n          ['id', anchor],\n        ];\n        headingOpenToken = undefined;\n      } else if (headingOpenToken) {\n        headingContent += token.children.reduce((result, child) => {\n          if (child.type !== 'footnote_ref') {\n            return result + child.content;\n          }\n          return result;\n        }, '');\n      }\n    });\n  });\n};\n","import markdownitAbbr from 'markdown-it-abbr';\nimport markdownitDeflist from 'markdown-it-deflist';\nimport markdownitFootnote from 'markdown-it-footnote';\nimport markdownitMark from 'markdown-it-mark';\nimport markdownitSub from 'markdown-it-sub';\nimport markdownitSup from 'markdown-it-sup';\nimport markdownitTasklist from './libs/markdownItTasklist';\nimport markdownitAnchor from './libs/markdownItAnchor';\nimport extensionSvc from '../services/extensionSvc';\n\nconst coreBaseRules = [\n    'normalize',\n    'block',\n    'inline',\n    'linkify',\n    'replacements',\n    'smartquotes',\n];\nconst blockBaseRules = [\n    'code',\n    'fence',\n    'blockquote',\n    'hr',\n    'list',\n    'reference',\n    'heading',\n    'lheading',\n    'html_block',\n    'table',\n    'paragraph',\n];\nconst inlineBaseRules = [\n    'text',\n    'newline',\n    'escape',\n    'backticks',\n    'strikethrough',\n    'emphasis',\n    'link',\n    'image',\n    'autolink',\n    'html_inline',\n    'entity',\n];\nconst inlineBaseRules2 = [\n    'balance_pairs',\n    'strikethrough',\n    'emphasis',\n    'text_collapse',\n];\n\nextensionSvc.onGetOptions((options, properties) => Object\n    .assign(options, properties.extensions.markdown));\n\nextensionSvc.onInitConverter(0, (markdown, options) => {\n    markdown.set({\n        html: true,\n        breaks: !!options.breaks,\n        linkify: !!options.linkify,\n        typographer: !!options.typographer,\n        langPrefix: 'prism language-',\n    });\n\n    markdown.core.ruler.enable(coreBaseRules);\n\n    const blockRules = blockBaseRules.slice();\n    if (!options.fence) {\n        blockRules.splice(blockRules.indexOf('fence'), 1);\n    }\n    if (!options.table) {\n        blockRules.splice(blockRules.indexOf('table'), 1);\n    }\n    markdown.block.ruler.enable(blockRules);\n\n    const inlineRules = inlineBaseRules.slice();\n    const inlineRules2 = inlineBaseRules2.slice();\n    if (!options.del) {\n        inlineRules.splice(blockRules.indexOf('strikethrough'), 1);\n        inlineRules2.splice(blockRules.indexOf('strikethrough'), 1);\n    }\n    markdown.inline.ruler.enable(inlineRules);\n    markdown.inline.ruler2.enable(inlineRules2);\n\n    if (options.abbr) {\n        markdown.use(markdownitAbbr);\n    }\n    if (options.deflist) {\n        markdown.use(markdownitDeflist);\n    }\n    if (options.footnote) {\n        markdown.use(markdownitFootnote);\n    }\n    if (options.imgsize) {\n        markdown.use(markdownitImgsize);\n    }\n    if (options.mark) {\n        markdown.use(markdownitMark);\n    }\n    if (options.sub) {\n        markdown.use(markdownitSub);\n    }\n    if (options.sup) {\n        markdown.use(markdownitSup);\n    }\n    if (options.tasklist) {\n        markdown.use(markdownitTasklist);\n    }\n    markdown.use(markdownitAnchor);\n\n    // Wrap tables into a div for scrolling\n    markdown.renderer.rules.table_open = (tokens, idx, opts) =>\n        `<div class=\"table-wrapper\">${markdown.renderer.renderToken(tokens, idx, opts)}`;\n    markdown.renderer.rules.table_close = (tokens, idx, opts) =>\n        `${markdown.renderer.renderToken(tokens, idx, opts)}</div>`;\n\n    // Transform style into align attribute to pass the HTML sanitizer\n    const textAlignLength = 'text-align:'.length;\n    markdown.renderer.rules.td_open = (tokens, idx, opts) => {\n        const token = tokens[idx];\n        if (token.attrs && token.attrs.length && token.attrs[0][0] === 'style') {\n            token.attrs = [\n                ['align', token.attrs[0][1].slice(textAlignLength)],\n            ];\n        }\n        return markdown.renderer.renderToken(tokens, idx, opts);\n    };\n    markdown.renderer.rules.th_open = markdown.renderer.rules.td_open;\n\n    markdown.renderer.rules.footnote_ref = (tokens, idx) => {\n        const n = `${Number(tokens[idx].meta.id + 1)}`;\n        let id = `fnref${n}`;\n        if (tokens[idx].meta.subId > 0) {\n            id += `:${tokens[idx].meta.subId}`;\n        }\n        return `<sup class=\"footnote-ref\"><a href=\"#fn${n}\" id=\"${id}\">${n}</a></sup>`;\n    };\n});\n\nextensionSvc.onSectionPreview((elt, options, isEditor) => {\n    // Transform task spans into checkboxes\n    elt.querySelectorAll('span.task-list-item-checkbox').cl_each((spanElt) => {\n        const checkboxElt = document.createElement('input');\n        checkboxElt.type = 'checkbox';\n        checkboxElt.className = 'task-list-item-checkbox';\n        if (spanElt.classList.contains('checked')) {\n            checkboxElt.setAttribute('checked', true);\n        }\n        if (!isEditor) {\n            checkboxElt.disabled = 'disabled';\n        }\n        spanElt.parentNode.replaceChild(checkboxElt, spanElt);\n    });\n});\n","const charInsideUrl = '(&|[-A-Z0-9+@#/%?=~_|[\\\\]()!:,.;])';\nconst charEndingUrl = '(&|[-A-Z0-9+@#/%=~_|[\\\\])])';\nconst urlPattern = new RegExp(`(https?|ftp)(://${charInsideUrl}*${charEndingUrl})(?=$|\\\\W)`, 'gi');\nconst emailPattern = /(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)/gi;\n\nconst markup = {\n    comment: /<!--[\\w\\W]*?-->/g,\n    tag: {\n        pattern: /<\\/?[\\w:-]+\\s*(?:\\s+[\\w:-]+(?:=(?:(\"|')(\\\\?[\\w\\W])*?\\1|[^\\s'\">=]+))?\\s*)*\\/?>/gi,\n        inside: {\n            tag: {\n                pattern: /^<\\/?[\\w:-]+/i,\n                inside: {\n                    punctuation: /^<\\/?/,\n                    namespace: /^[\\w-]+?:/,\n                },\n            },\n            'attr-value': {\n                pattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/gi,\n                inside: {\n                    punctuation: /=|>|\"/g,\n                },\n            },\n            punctuation: /\\/?>/g,\n            'attr-name': {\n                pattern: /[\\w:-]+/g,\n                inside: {\n                    namespace: /^[\\w-]+?:/,\n                },\n            },\n        },\n    },\n    entity: /&#?[\\da-z]{1,8};/gi,\n};\n\nconst latex = {\n    // A tex command e.g. \\foo\n    keyword: /\\\\(?:[^a-zA-Z]|[a-zA-Z]+)/g,\n    // Curly and square braces\n    lparen: /[[({]/g,\n    // Curly and square braces\n    rparen: /[\\])}]/g,\n    // A comment. Tex comments start with % and go to\n    // the end of the line\n    comment: /%.*/g,\n};\n\nexport default {\n    makeGrammars(options) {\n        const grammars = {\n            main: {},\n            list: {},\n            blockquote: {},\n            table: {},\n            deflist: {},\n        };\n\n        grammars.deflist.deflist = {\n            pattern: new RegExp(\n                [\n                    '^ {0,3}\\\\S.*\\\\n', // Description line\n                    '(?:[ \\\\t]*\\\\n)?', // Optional empty line\n                    '(?:',\n                    '[ \\\\t]*:[ \\\\t].*\\\\n', // Colon line\n                    '(?:',\n                    '(?:',\n                    '.*\\\\S.*\\\\n', // Non-empty line\n                    '|',\n                    '[ \\\\t]*\\\\n(?! ?\\\\S)', // Or empty line not followed by unindented line\n                    ')',\n                    ')*',\n                    '(?:[ \\\\t]*\\\\n)*', // Empty lines\n                    ')+',\n                ].join(''),\n                'm',\n            ),\n            inside: {\n                term: /^.+/,\n                cl: /^[ \\t]*:[ \\t]/gm,\n            },\n        };\n\n        const insideFences = options.insideFences || {};\n        insideFences['cl cl-pre'] = /```|~~~/;\n        if (options.fence) {\n            grammars.main['pre gfm'] = {\n                pattern: /^(```|~~~)[\\s\\S]*?\\n\\1 *$/gm,\n                inside: insideFences,\n            };\n            grammars.list['pre gfm'] = {\n                pattern: /^(?: {4}|\\t)(```|~~~)[\\s\\S]*?\\n(?: {4}|\\t)\\1\\s*$/gm,\n                inside: insideFences,\n            };\n            grammars.deflist.deflist.inside['pre gfm'] = grammars.list['pre gfm'];\n        }\n\n        grammars.main['h1 alt'] = {\n            pattern: /^.+\\n=+[ \\t]*$/gm,\n            inside: {\n                'cl cl-hash': /=+[ \\t]*$/,\n            },\n        };\n        grammars.main['h2 alt'] = {\n            pattern: /^.+\\n-+[ \\t]*$/gm,\n            inside: {\n                'cl cl-hash': /-+[ \\t]*$/,\n            },\n        };\n        for (let i = 6; i >= 1; i -= 1) {\n            grammars.main[`h${i}`] = {\n                pattern: new RegExp(`^#{${i}}[ \\t].+$`, 'gm'),\n                inside: {\n                    'cl cl-hash': new RegExp(`^#{${i}}`),\n                },\n            };\n        }\n\n        const list = /^[ \\t]*([*+-]|\\d+\\.)[ \\t]/gm;\n        const blockquote = {\n            pattern: /^\\s*>.*(?:\\n[ \\t]*\\S.*)*/gm,\n            inside: {\n                'cl cl-gt': /^\\s*>/gm,\n                'cl cl-li': list,\n            },\n        };\n        grammars.list.blockquote = blockquote;\n        grammars.blockquote.blockquote = blockquote;\n        grammars.deflist.deflist.inside.blockquote = blockquote;\n        grammars.list['cl cl-li'] = list;\n        grammars.blockquote['cl cl-li'] = list;\n        grammars.deflist.deflist.inside['cl cl-li'] = list;\n\n        grammars.table.table = {\n            pattern: new RegExp(\n                [\n                    '^\\\\s*\\\\S.*[|].*\\\\n', // Header Row\n                    '[-| :]+\\\\n', // Separator\n                    '(?:.*[|].*\\\\n?)*', // Table rows\n                    '$',\n                ].join(''),\n                'gm',\n            ),\n            inside: {\n                'cl cl-title-separator': /^[-| :]+$/gm,\n                'cl cl-pipe': /[|]/gm,\n            },\n        };\n\n        grammars.main.hr = {\n            pattern: /^ {0,3}([*\\-_] *){3,}$/gm,\n        };\n\n        if (options.tasklist) {\n            grammars.list.task = {\n                pattern: /^\\[[ xX]\\] /,\n                inside: {\n                    cl: /[[\\]]/,\n                    strong: /[xX]/,\n                },\n            };\n        }\n\n        const defs = {};\n        if (options.footnote) {\n            defs.fndef = {\n                pattern: /^ {0,3}\\[\\^.*?\\]:.*$/gm,\n                inside: {\n                    'ref-id': {\n                        pattern: /^ {0,3}\\[\\^.*?\\]/,\n                        inside: {\n                            cl: /(\\[\\^|\\])/,\n                        },\n                    },\n                },\n            };\n        }\n        if (options.abbr) {\n            defs.abbrdef = {\n                pattern: /^ {0,3}\\*\\[.*?\\]:.*$/gm,\n                inside: {\n                    'abbr-id': {\n                        pattern: /^ {0,3}\\*\\[.*?\\]/,\n                        inside: {\n                            cl: /(\\*\\[|\\])/,\n                        },\n                    },\n                },\n            };\n        }\n        defs.linkdef = {\n            pattern: /^ {0,3}\\[.*?\\]:.*$/gm,\n            inside: {\n                'link-id': {\n                    pattern: /^ {0,3}\\[.*?\\]/,\n                    inside: {\n                        cl: /[[\\]]/,\n                    },\n                },\n                url: urlPattern,\n            },\n        };\n\n        Object.entries(defs).forEach(([name, def]) => {\n            grammars.main[name] = def;\n            grammars.list[name] = def;\n            grammars.blockquote[name] = def;\n            grammars.table[name] = def;\n            grammars.deflist[name] = def;\n        });\n\n        grammars.main.pre = {\n            pattern: /^\\s*\\n(?: {4}|\\t).*\\S.*\\n((?: {4}|\\t).*\\n)*/gm,\n        };\n\n        const rest = {};\n        rest.code = {\n            pattern: /(`+)[\\s\\S]*?\\1/g,\n            inside: {\n                'cl cl-code': /`/,\n            },\n        };\n        if (options.math) {\n            rest['math block'] = {\n                pattern: /\\\\\\\\\\[[\\s\\S]*?\\\\\\\\\\]/g,\n                inside: {\n                    'cl cl-bracket-start': /^\\\\\\\\\\[/,\n                    'cl cl-bracket-end': /\\\\\\\\\\]$/,\n                    rest: latex,\n                },\n            };\n            rest['math inline'] = {\n                pattern: /\\\\\\\\\\([\\s\\S]*?\\\\\\\\\\)/g,\n                inside: {\n                    'cl cl-bracket-start': /^\\\\\\\\\\(/,\n                    'cl cl-bracket-end': /\\\\\\\\\\)$/,\n                    rest: latex,\n                },\n            };\n            rest['math expr block'] = {\n                pattern: /(\\$\\$)[\\s\\S]*?\\1/g,\n                inside: {\n                    'cl cl-bracket-start': /^\\$\\$/,\n                    'cl cl-bracket-end': /\\$\\$$/,\n                    rest: latex,\n                },\n            };\n            rest['math expr inline'] = {\n                pattern: /\\$(?!\\s)[\\s\\S]*?\\S\\$(?!\\d)/g,\n                inside: {\n                    'cl cl-bracket-start': /^\\$/,\n                    'cl cl-bracket-end': /\\$$/,\n                    rest: latex,\n                },\n            };\n        }\n        if (options.footnote) {\n            rest.inlinefn = {\n                pattern: /\\^\\[.+?\\]/g,\n                inside: {\n                    cl: /(\\^\\[|\\])/,\n                },\n            };\n            rest.fn = {\n                pattern: /\\[\\^.+?\\]/g,\n                inside: {\n                    cl: /(\\[\\^|\\])/,\n                },\n            };\n        }\n        rest.img = {\n            pattern: /!\\[.*?\\]\\(.+?\\)/g,\n            inside: {\n                'cl cl-title': /['‘][^'’]*['’]|[\"“][^\"”]*[\"”](?=\\)$)/,\n                'cl cl-src': {\n                    pattern: /(\\]\\()[^('\" \\t]+(?=[)'\" \\t])/,\n                    lookbehind: true,\n                },\n            },\n        };\n        if (options.imgsize) {\n            rest.img.inside['cl cl-size'] = /=\\d*x\\d*/;\n        }\n        rest.link = {\n            pattern: /\\[.*?\\]\\(.+?\\)/gm,\n            inside: {\n                'cl cl-underlined-text': {\n                    pattern: /(\\[)[^\\]]*/,\n                    lookbehind: true,\n                },\n                'cl cl-title': /['‘][^'’]*['’]|[\"“][^\"”]*[\"”](?=\\)$)/,\n            },\n        };\n        rest.imgref = {\n            pattern: /!\\[.*?\\][ \\t]*\\[.*?\\]/g,\n        };\n        rest.linkref = {\n            pattern: /\\[.*?\\][ \\t]*\\[.*?\\]/g,\n            inside: {\n                'cl cl-underlined-text': {\n                    pattern: /^(\\[)[^\\]]*(?=\\][ \\t]*\\[)/,\n                    lookbehind: true,\n                },\n            },\n        };\n        rest.comment = markup.comment;\n        rest.tag = markup.tag;\n        rest.url = urlPattern;\n        rest.email = emailPattern;\n        rest.strong = {\n            pattern: /(^|[^\\w*])(__|\\*\\*)(?![_*])[\\s\\S]*?\\2(?=([^\\w*]|$))/gm,\n            lookbehind: true,\n            inside: {\n                'cl cl-strong cl-start': /^(__|\\*\\*)/,\n                'cl cl-strong cl-close': /(__|\\*\\*)$/,\n            },\n        };\n        rest.em = {\n            pattern: /(^|[^\\w*])(_|\\*)(?![_*])[\\s\\S]*?\\2(?=([^\\w*]|$))/gm,\n            lookbehind: true,\n            inside: {\n                'cl cl-em cl-start': /^(_|\\*)/,\n                'cl cl-em cl-close': /(_|\\*)$/,\n            },\n        };\n        rest['strong em'] = {\n            pattern: /(^|[^\\w*])(__|\\*\\*)(_|\\*)(?![_*])[\\s\\S]*?\\3\\2(?=([^\\w*]|$))/gm,\n            lookbehind: true,\n            inside: {\n                'cl cl-strong cl-start': /^(__|\\*\\*)(_|\\*)/,\n                'cl cl-strong cl-close': /(_|\\*)(__|\\*\\*)$/,\n            },\n        };\n        rest['strong em inv'] = {\n            pattern: /(^|[^\\w*])(_|\\*)(__|\\*\\*)(?![_*])[\\s\\S]*?\\3\\2(?=([^\\w*]|$))/gm,\n            lookbehind: true,\n            inside: {\n                'cl cl-strong cl-start': /^(_|\\*)(__|\\*\\*)/,\n                'cl cl-strong cl-close': /(__|\\*\\*)(_|\\*)$/,\n            },\n        };\n        if (options.del) {\n            rest.del = {\n                pattern: /(^|[^\\w*])(~~)[\\s\\S]*?\\2(?=([^\\w*]|$))/gm,\n                lookbehind: true,\n                inside: {\n                    cl: /~~/,\n                    'cl-del-text': /[^~]+/,\n                },\n            };\n        }\n        if (options.mark) {\n            rest.mark = {\n                pattern: /(^|[^\\w*])(==)[\\s\\S]*?\\2(?=([^\\w*]|$))/gm,\n                lookbehind: true,\n                inside: {\n                    cl: /==/,\n                    'cl-mark-text': /[^=]+/,\n                },\n            };\n        }\n        if (options.sub) {\n            rest.sub = {\n                pattern: /(~)(?=\\S)(.*?\\S)\\1/gm,\n                inside: {\n                    cl: /~/,\n                },\n            };\n        }\n        if (options.sup) {\n            rest.sup = {\n                pattern: /(\\^)(?=\\S)(.*?\\S)\\1/gm,\n                inside: {\n                    cl: /\\^/,\n                },\n            };\n        }\n        rest.entity = markup.entity;\n\n        for (let c = 6; c >= 1; c -= 1) {\n            grammars.main[`h${c}`].inside.rest = rest;\n        }\n        grammars.main['h1 alt'].inside.rest = rest;\n        grammars.main['h2 alt'].inside.rest = rest;\n        grammars.table.table.inside.rest = rest;\n        grammars.main.rest = rest;\n        grammars.list.rest = rest;\n        grammars.blockquote.blockquote.inside.rest = rest;\n        grammars.deflist.deflist.inside.rest = rest;\n        if (options.footnote) {\n            grammars.main.fndef.inside.rest = rest;\n        }\n\n        const restLight = {\n            code: rest.code,\n            inlinefn: rest.inlinefn,\n            fn: rest.fn,\n            link: rest.link,\n            linkref: rest.linkref,\n        };\n        rest.strong.inside.rest = restLight;\n        rest.em.inside.rest = restLight;\n        if (options.del) {\n            rest.del.inside.rest = restLight;\n        }\n        if (options.mark) {\n            rest.mark.inside.rest = restLight;\n        }\n\n        const inside = {\n            code: rest.code,\n            comment: rest.comment,\n            tag: rest.tag,\n            strong: rest.strong,\n            em: rest.em,\n            del: rest.del,\n            sub: rest.sub,\n            sup: rest.sup,\n            entity: markup.entity,\n        };\n        rest.link.inside['cl cl-underlined-text'].inside = inside;\n        rest.linkref.inside['cl cl-underlined-text'].inside = inside;\n\n        // Wrap any other characters to allow paragraph folding\n        Object.entries(grammars).forEach(([, grammar]) => {\n            grammar.rest = grammar.rest || {};\n            grammar.rest.p = /.+/;\n        });\n\n        return grammars;\n    },\n};\n","// For utils.uid()\nconst uidLength = 16;\nconst crypto = window.crypto || window.msCrypto;\nconst alphabet = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\nconst radix = alphabet.length;\nconst array = new Uint32Array(uidLength);\n\n// For utils.parseQueryParams()\nconst parseQueryParams = (params) => {\n    const result = {};\n    params.split('&').forEach((param) => {\n        const [key, value] = param.split('=').map(decodeURIComponent);\n        if (key && value != null) {\n            result[key] = value;\n        }\n    });\n    return result;\n};\n\n// For utils.setQueryParams()\nconst filterParams = (params = {}) => {\n    const result = {};\n    Object.entries(params).forEach(([key, value]) => {\n        if (key && value != null) {\n            result[key] = value;\n        }\n    });\n    return result;\n};\n\n// For utils.computeProperties()\nconst deepOverride = (obj, opt) => {\n    if (obj === undefined) {\n        return opt;\n    }\n    const objType = Object.prototype.toString.call(obj);\n    const optType = Object.prototype.toString.call(opt);\n    if (objType !== optType) {\n        return obj;\n    }\n    if (objType !== '[object Object]') {\n        return opt === undefined ? obj : opt;\n    }\n    Object.keys({\n        ...obj,\n        ...opt,\n    }).forEach((key) => {\n        obj[key] = deepOverride(obj[key], opt[key]);\n    });\n    return obj;\n};\n\n// For utils.addQueryParams()\nconst urlParser = document.createElement('a');\n\nconst deepCopy = (obj) => {\n    if (obj == null) {\n        return obj;\n    }\n    return JSON.parse(JSON.stringify(obj));\n};\n\n// Compute presets\nconst computedPresets = {};\n// Object.keys(presets).forEach((key) => {\n//     let preset = deepCopy(presets[key][0]);\n//     if (presets[key][1]) {\n//         preset = deepOverride(preset, presets[key][1]);\n//     }\n//     computedPresets[key] = preset;\n// });\n\nexport default {\n    computedPresets,\n    queryParams: parseQueryParams(window.location.hash.slice(1)),\n    setQueryParams(params = {}) {\n        this.queryParams = filterParams(params);\n        const serializedParams = Object.entries(this.queryParams).map(([key, value]) =>\n            `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&');\n        const hash = `#${serializedParams}`;\n        if (window.location.hash !== hash) {\n            window.location.replace(hash);\n        }\n    },\n    sanitizeText(text) {\n        const result = `${text || ''}`.slice(0, constants.textMaxLength);\n        // last char must be a `\\n`.\n        return `${result}\\n`.replace(/\\n\\n$/, '\\n');\n    },\n    sanitizeName(name) {\n        return `${name || ''}`\n        // Keep only 250 characters\n            .slice(0, 250) || constants.defaultName;\n    },\n    sanitizeFilename(name) {\n        return this.sanitizeName(`${name || ''}`\n        // Replace `/`, control characters and other kind of spaces with a space\n            .replace(/[/\\x00-\\x1F\\x7f-\\xa0\\s]+/g, ' ') // eslint-disable-line no-control-regex\n            .trim()) || constants.defaultName;\n    },\n    deepCopy,\n    serializeObject(obj) {\n        return obj === undefined ? obj : JSON.stringify(obj, (key, value) => {\n            if (Object.prototype.toString.call(value) !== '[object Object]') {\n                return value;\n            }\n            // Sort keys to have a predictable result\n            return Object.keys(value).sort().reduce((sorted, valueKey) => {\n                sorted[valueKey] = value[valueKey];\n                return sorted;\n            }, {});\n        });\n    },\n    search(items, criteria) {\n        let result;\n        items.some((item) => {\n            // If every field fits the criteria\n            if (Object.entries(criteria).every(([key, value]) => value === item[key])) {\n                result = item;\n            }\n            return result;\n        });\n        return result;\n    },\n    uid() {\n        crypto.getRandomValues(array);\n        return array.cl_map(value => alphabet[value % radix]).join('');\n    },\n    hash(str) {\n    // https://stackoverflow.com/a/7616484/1333165\n        let hash = 0;\n        if (!str) return hash;\n        for (let i = 0; i < str.length; i += 1) {\n            const char = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char; // eslint-disable-line no-bitwise\n            hash |= 0; // eslint-disable-line no-bitwise\n        }\n        return hash;\n    },\n    getItemHash(item) {\n        return this.hash(this.serializeObject({\n            ...item,\n            // These properties must not be part of the hash\n            id: undefined,\n            hash: undefined,\n            history: undefined,\n        }));\n    },\n    addItemHash(item) {\n        return {\n            ...item,\n            hash: this.getItemHash(item),\n        };\n    },\n    makeWorkspaceId(params) {\n        return Math.abs(this.hash(this.serializeObject(params))).toString(36);\n    },\n    getDbName(workspaceId) {\n        let dbName = 'stackedit-db';\n        if (workspaceId !== 'main') {\n            dbName += `-${workspaceId}`;\n        }\n        return dbName;\n    },\n    encodeBase64(str, urlSafe = false) {\n        const uriEncodedStr = encodeURIComponent(str);\n        const utf8Str = uriEncodedStr.replace(\n            /%([0-9A-F]{2})/g,\n            (match, p1) => String.fromCharCode(`0x${p1}`),\n        );\n        const result = btoa(utf8Str);\n        if (!urlSafe) {\n            return result;\n        }\n        return result\n            .replace(/\\//g, '_') // Replace `/` with `_`\n            .replace(/\\+/g, '-') // Replace `+` with `-`\n            .replace(/=+$/, ''); // Remove trailing `=`\n    },\n    decodeBase64(str) {\n    // In case of URL safe base64\n        const sanitizedStr = str.replace(/_/g, '/').replace(/-/g, '+');\n        const utf8Str = atob(sanitizedStr);\n        const uriEncodedStr = utf8Str\n            .split('')\n            .map(c => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`)\n            .join('');\n        return decodeURIComponent(uriEncodedStr);\n    },\n    computeProperties(yamlProperties) {\n        let properties = {};\n        try {\n            properties = yaml.safeLoad(yamlProperties) || {};\n        } catch (e) {\n            // Ignore\n        }\n        const extensions = properties.extensions || {};\n        const computedPreset = deepCopy(computedPresets[extensions.preset] || computedPresets.default);\n        const computedExtensions = deepOverride(computedPreset, properties.extensions);\n        computedExtensions.preset = extensions.preset;\n        properties.extensions = computedExtensions;\n        return properties;\n    },\n    randomize(value) {\n        return Math.floor((1 + (Math.random() * 0.2)) * value);\n    },\n    setInterval(func, interval) {\n        return setInterval(() => func(), this.randomize(interval));\n    },\n    async awaitSequence(values, asyncFunc) {\n        const results = [];\n        const valuesLeft = values.slice().reverse();\n        const runWithNextValue = async () => {\n            if (!valuesLeft.length) {\n                return results;\n            }\n            results.push(await asyncFunc(valuesLeft.pop()));\n            return runWithNextValue();\n        };\n        return runWithNextValue();\n    },\n    async awaitSome(asyncFunc) {\n        if (await asyncFunc()) {\n            return this.awaitSome(asyncFunc);\n        }\n        return null;\n    },\n    someResult(values, func) {\n        let result;\n        values.some((value) => {\n            result = func(value);\n            return result;\n        });\n        return result;\n    },\n    parseQueryParams,\n    addQueryParams(url = '', params = {}, hash = false) {\n        const keys = Object.keys(params).filter(key => params[key] != null);\n        urlParser.href = url;\n        if (!keys.length) {\n            return urlParser.href;\n        }\n        const serializedParams = keys.map(key =>\n            `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&');\n        if (hash) {\n            if (urlParser.hash) {\n                urlParser.hash += '&';\n            } else {\n                urlParser.hash = '#';\n            }\n            urlParser.hash += serializedParams;\n        } else {\n            if (urlParser.search) {\n                urlParser.search += '&';\n            } else {\n                urlParser.search = '?';\n            }\n            urlParser.search += serializedParams;\n        }\n        return urlParser.href;\n    },\n    resolveUrl(baseUrl, path) {\n        const oldBaseElt = document.getElementsByTagName('base')[0];\n        const oldHref = oldBaseElt && oldBaseElt.href;\n        const newBaseElt = oldBaseElt || document.head.appendChild(document.createElement('base'));\n        newBaseElt.href = baseUrl;\n        urlParser.href = path;\n        const result = urlParser.href;\n        if (oldBaseElt) {\n            oldBaseElt.href = oldHref;\n        } else {\n            document.head.removeChild(newBaseElt);\n        }\n        return result;\n    },\n    getHostname(url) {\n        urlParser.href = url;\n        return urlParser.hostname;\n    },\n    encodeUrlPath(path) {\n        return path ? path.split('/').map(encodeURIComponent).join('/') : '';\n    },\n    parseGithubRepoUrl(url) {\n        const parsedRepo = url && url.match(/([^/:]+)\\/([^/]+?)(?:\\.git|\\/)?$/);\n        return parsedRepo && {\n            owner: parsedRepo[1],\n            repo: parsedRepo[2],\n        };\n    },\n    parseGitlabProjectPath(url) {\n        const parsedProject = url && url.match(/^https:\\/\\/[^/]+\\/(.+?)(?:\\.git|\\/)?$/);\n        return parsedProject && parsedProject[1];\n    },\n    createHiddenIframe(url) {\n        const iframeElt = document.createElement('iframe');\n        iframeElt.style.position = 'absolute';\n        iframeElt.style.left = '-99px';\n        iframeElt.style.width = '1px';\n        iframeElt.style.height = '1px';\n        iframeElt.src = url;\n        return iframeElt;\n    },\n    wrapRange(range, eltProperties) {\n        const rangeLength = `${range}`.length;\n        let wrappedLength = 0;\n        const treeWalker = document\n            .createTreeWalker(range.commonAncestorContainer, NodeFilter.SHOW_TEXT);\n        let { startOffset } = range;\n        treeWalker.currentNode = range.startContainer;\n        if (treeWalker.currentNode.nodeType === Node.TEXT_NODE || treeWalker.nextNode()) {\n            do {\n                if (treeWalker.currentNode.nodeValue !== '\\n') {\n                    if (treeWalker.currentNode === range.endContainer &&\n            range.endOffset < treeWalker.currentNode.nodeValue.length\n                    ) {\n                        treeWalker.currentNode.splitText(range.endOffset);\n                    }\n                    if (startOffset) {\n                        treeWalker.currentNode = treeWalker.currentNode.splitText(startOffset);\n                        startOffset = 0;\n                    }\n                    const elt = document.createElement('span');\n                    Object.entries(eltProperties).forEach(([key, value]) => {\n                        elt[key] = value;\n                    });\n                    treeWalker.currentNode.parentNode.insertBefore(elt, treeWalker.currentNode);\n                    elt.appendChild(treeWalker.currentNode);\n                }\n                wrappedLength += treeWalker.currentNode.nodeValue.length;\n                if (wrappedLength >= rangeLength) {\n                    break;\n                }\n            }\n            while (treeWalker.nextNode());\n        }\n    },\n    unwrapRange(eltCollection) {\n        Array.prototype.slice.call(eltCollection).forEach((elt) => {\n            // Loop in case another wrapper has been added inside\n            for (let child = elt.firstChild; child; child = elt.firstChild) {\n                if (child.nodeType === 3) {\n                    if (elt.previousSibling && elt.previousSibling.nodeType === 3) {\n                        child.nodeValue = elt.previousSibling.nodeValue + child.nodeValue;\n                        elt.parentNode.removeChild(elt.previousSibling);\n                    }\n                    if (!child.nextSibling && elt.nextSibling && elt.nextSibling.nodeType === 3) {\n                        child.nodeValue += elt.nextSibling.nodeValue;\n                        elt.parentNode.removeChild(elt.nextSibling);\n                    }\n                }\n                elt.parentNode.insertBefore(child, elt);\n            }\n            elt.parentNode.removeChild(elt);\n        });\n    },\n};\n","import DiffMatchPatch from 'diff-match-patch';\nimport MarkdownIt from 'markdown-it';\nimport markdownGrammarSvc from './markdownGrammarSvc';\nimport extensionSvc from './extensionSvc';\nimport utils from './utils';\n\nconst htmlSectionMarker = '\\uF111\\uF222\\uF333\\uF444';\nconst diffMatchPatch = new DiffMatchPatch();\n\n// Disable spell checking in specific tokens\nconst noSpellcheckTokens = Object.create(null);\n\nfunction createFlagMap(arr) {\n    return arr.reduce((map, type) => ({ ...map, [type]: true }), {});\n}\nconst startSectionBlockTypeMap = createFlagMap([\n    'paragraph_open',\n    'blockquote_open',\n    'heading_open',\n    'code',\n    'fence',\n    'table_open',\n    'html_block',\n    'bullet_list_open',\n    'ordered_list_open',\n    'hr',\n    'dl_open',\n]);\nconst listBlockTypeMap = createFlagMap([\n    'bullet_list_open',\n    'ordered_list_open',\n]);\nconst blockquoteBlockTypeMap = createFlagMap([\n    'blockquote_open',\n]);\nconst tableBlockTypeMap = createFlagMap([\n    'table_open',\n]);\nconst deflistBlockTypeMap = createFlagMap([\n    'dl_open',\n]);\n\nfunction hashArray(arr, valueHash, valueArray) {\n    const hash = [];\n    arr.forEach((str) => {\n        let strHash = valueHash[str];\n        if (strHash === undefined) {\n            strHash = valueArray.length;\n            valueArray.push(str);\n            valueHash[str] = strHash;\n        }\n        hash.push(strHash);\n    });\n    return String.fromCharCode.apply(null, hash);\n}\n\nexport default {\n    defaultOptions: null,\n    defaultConverter: null,\n    defaultPrismGrammars: null,\n\n    init() {\n        const defaultProperties = { extensions: utils.computedPresets.default };\n\n        // Default options for the markdown converter and the grammar\n        this.defaultOptions = {\n            ...extensionSvc.getOptions(defaultProperties),\n            insideFences,\n        };\n\n        this.defaultConverter = this.createConverter(this.defaultOptions);\n        this.defaultPrismGrammars = markdownGrammarSvc.makeGrammars(this.defaultOptions);\n    },\n\n    /**\n   * Creates a converter and init it with extensions.\n   * @returns {Object} A converter.\n   */\n    createConverter(options) {\n    // Let the listeners add the rules\n        const converter = new MarkdownIt('zero');\n        converter.core.ruler.enable([], true);\n        converter.block.ruler.enable([], true);\n        converter.inline.ruler.enable([], true);\n        extensionSvc.initConverter(converter, options);\n        Object.keys(startSectionBlockTypeMap).forEach((type) => {\n            const rule = converter.renderer.rules[type] || converter.renderer.renderToken;\n            converter.renderer.rules[type] = (tokens, idx, opts, env, self) => {\n                if (tokens[idx].sectionDelimiter) {\n                    // Add section delimiter\n                    return htmlSectionMarker + rule.call(converter.renderer, tokens, idx, opts, env, self);\n                }\n                return rule.call(converter.renderer, tokens, idx, opts, env, self);\n            };\n        });\n        return converter;\n    },\n\n    /**\n   * Parse markdown sections by passing the 2 first block rules of the markdown-it converter.\n   * @param {Object} converter The markdown-it converter.\n   * @param {String} text The text to be parsed.\n   * @returns {Object} A parsing context to be passed to `convert`.\n   */\n    parseSections(converter, text) {\n        const markdownState = new converter.core.State(text, converter, {});\n        const markdownCoreRules = converter.core.ruler.getRules('');\n        markdownCoreRules[0](markdownState); // Pass the normalize rule\n        markdownCoreRules[1](markdownState); // Pass the block rule\n        const lines = text.split('\\n');\n        if (!lines[lines.length - 1]) {\n            // In cledit, last char is always '\\n'.\n            // Remove it as one will be added by addSection\n            lines.pop();\n        }\n        const parsingCtx = {\n            text,\n            sections: [],\n            converter,\n            markdownState,\n            markdownCoreRules,\n        };\n        let data = 'main';\n        let i = 0;\n\n        function addSection(maxLine) {\n            const section = {\n                text: '',\n                data,\n            };\n            for (; i < maxLine; i += 1) {\n                section.text += `${lines[i]}\\n`;\n            }\n            if (section) {\n                parsingCtx.sections.push(section);\n            }\n        }\n        markdownState.tokens.forEach((token, index) => {\n            // index === 0 means there are empty lines at the begining of the file\n            if (token.level === 0 && startSectionBlockTypeMap[token.type] === true) {\n                if (index > 0) {\n                    token.sectionDelimiter = true;\n                    addSection(token.map[0]);\n                }\n                if (listBlockTypeMap[token.type] === true) {\n                    data = 'list';\n                } else if (blockquoteBlockTypeMap[token.type] === true) {\n                    data = 'blockquote';\n                } else if (tableBlockTypeMap[token.type] === true) {\n                    data = 'table';\n                } else if (deflistBlockTypeMap[token.type] === true) {\n                    data = 'deflist';\n                } else {\n                    data = 'main';\n                }\n            }\n        });\n        addSection(lines.length);\n        return parsingCtx;\n    },\n\n    /**\n   * Convert markdown sections previously parsed with `parseSections`.\n   * @param {Object} parsingCtx The parsing context returned by `parseSections`.\n   * @param {Object} previousConversionCtx The conversion context returned by a previous call\n   * to `convert`, in order to calculate the `htmlSectionDiff` of the returned conversion context.\n   * @returns {Object} A conversion context.\n   */\n    convert(parsingCtx, previousConversionCtx) {\n    // This function can be called twice without editor modification\n    // so prevent from converting it again.\n        if (!parsingCtx.markdownState.isConverted) {\n            // Skip 2 first rules previously passed in parseSections\n            parsingCtx.markdownCoreRules.slice(2).forEach(rule => rule(parsingCtx.markdownState));\n            parsingCtx.markdownState.isConverted = true;\n        }\n        const { tokens } = parsingCtx.markdownState;\n        const html = parsingCtx.converter.renderer.render(\n            tokens,\n            parsingCtx.converter.options,\n            parsingCtx.markdownState.env,\n        );\n        const htmlSectionList = html.split(htmlSectionMarker);\n        if (htmlSectionList[0] === '') {\n            htmlSectionList.shift();\n        }\n        const valueHash = Object.create(null);\n        const valueArray = [];\n        const newSectionHash = hashArray(htmlSectionList, valueHash, valueArray);\n        let htmlSectionDiff;\n        if (previousConversionCtx) {\n            const oldSectionHash = hashArray(\n                previousConversionCtx.htmlSectionList,\n                valueHash,\n                valueArray,\n            );\n            htmlSectionDiff = diffMatchPatch.diff_main(oldSectionHash, newSectionHash, false);\n        } else {\n            htmlSectionDiff = [\n                [1, newSectionHash],\n            ];\n        }\n        return {\n            text: parsingCtx.text,\n            sectionList: parsingCtx.sectionList,\n            htmlSectionList,\n            htmlSectionDiff,\n        };\n    },\n\n    /**\n   * Helper to highlight arbitrary markdown\n   * @param {Object} markdown The markdown content to highlight.\n   * @param {Object} converter An optional converter.\n   * @param {Object} grammars Optional grammars.\n   * @returns {Object} The highlighted markdown in HTML format.\n   */\n    highlight(markdown, converter = this.defaultConverter, grammars = this.defaultPrismGrammars) {\n        const parsingCtx = this.parseSections(converter, markdown);\n        return {}\n    },\n};\n","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StackEdit.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StackEdit.vue?vue&type=script&lang=js&\"","<template>\n  <div ref=\"markdownContent\">\n    content\n  </div>\n</template>\n\n<script>\nimport './extensions/index.js';\nimport markdownConversionSvc from './services/markdownConversionSvc.js'\n\nexport default {\n    name: 'VfStackeditInput',\n    props: {\n        field: Object,\n        value: String,\n        id: String\n    },\n    created() {\n        markdownConversionSvc.init();\n    },\n    mounted() {\n        const converter = markdownConversionSvc.createConverter({});\n        console.log(markdownConversionSvc.parseSections(converter, 'd **asd as**d '))\n    }\n}\n</script>\n","import { render, staticRenderFns } from \"./StackEdit.vue?vue&type=template&id=8fd98340&\"\nimport script from \"./StackEdit.vue?vue&type=script&lang=js&\"\nexport * from \"./StackEdit.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}